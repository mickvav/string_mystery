#!/usr/bin/env python3

import time

# generated by google gemini code assist + modified.
# prompt: "/generate function that takes two arguments n and m and returns a string, containing n repetitions of first m letters of english alphabet"
# slightly modified manually (% 26 added)
def generate2d(n: int, m: int) -> str:
    res = ""
    for i in range(n):
        for j in range(m):
            res += chr(ord('a') + j % 26)
    return res

# manual optimisation
def generate2dOptimised(n: int, m:int) -> str:
    res = ""
    part = ""
    for j in range(m):
        part += chr(ord('a') + j % 26)
    for i in range(n):
        res += part
    return res

def repeat_alphabet_chatgpt(n, m):
    # Ensure n and m are valid
    if not (isinstance(n, int) and isinstance(m, int)):
        return "Both n and m must be integers."
    if n < 0 or m < 0:
        return "Both n and m must be non-negative integers."
    
    # Create the full alphabet string
    alphabet = 'abcdefghijklmnopqrstuvwxyz'
    
    # Calculate the full substring needed by repeating and slicing the alphabet
    full_repeats = m // 26
    remainder = m % 26
    
    # Create the substring with full repeats and the remainder
    substring = alphabet * full_repeats + alphabet[:remainder]
    
    # Repeat the substring n times
    result = substring * n
    
    return result

#  function that will take 2 numbers, pointer to another function and run that function, measuring time that it took to execute
def time_it(n: int, m: int, func):
    start_time = time.time()
    func(n, m)
    end_time = time.time()
    return end_time - start_time

def main():
    print(" N\t M \t Gemini(t1)\t Gemini+opt(t2)\tChatGPT(t3)\tt1/(m*n)\tt2/(n+m)\tt3/(m+n)")
    for ni in range(1, 4):
        for mi in range(1, 4):
            n = 10**ni
            m = 10**mi
            t1 = time_it(n,m, generate2d)
            t2 = time_it(n,m, generate2dOptimised)
            t3 = time_it(n,m, repeat_alphabet_chatgpt)
            print(f"{n}\t{m}\t{t1:.2e}\t{t2:.2e}\t{t3:.2e}\t{t1/(n*m):.2e}\t{t2/(n+m):.2e}\t{t3/(n+m):.2e}")
    print("\n====Part 2 - only chatgpt's algorithm ====")
    with open("res3.txt","w") as f:
        print(" N\t M \t ChatGPT(t3)\tt3/(m*n)")
        f.write(" N\t M \t ChatGPT(t3)\tt3/(m*n)\n")
        for ni in range(1, 11):
            for mi in range(1, 11):
                n = 3**ni
                m = 3**mi
                t3 = time_it(n,m, repeat_alphabet_chatgpt)
                f.write(f"{n}\t{m}\t{t3:.2e}\t{t3/(n*m):.2e}\n")
                print(f"{n}\t{m}\t{t3:.2e}\t{t3/(n*m):.2e}")
            f.write("\n")

if __name__ == '__main__':
    main()
